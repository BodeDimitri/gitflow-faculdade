name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  REGISTRY: docker.io
  IMAGE_NAME: bodedimitri/my-java-app
  AZURE_WEBAPP_NAME_STAGING: web-app-stagging
  AZURE_WEBAPP_NAME_PRODUCTION: web-app-prod
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21 with Temurin
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          cache: maven

      - name: Build and Run Tests (Cucumber, API)
        run: mvn clean verify
        working-directory: Faculdade

      #- name: List files in target
        #run: ls -al Faculdade/target  

  tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: Faculdade/target/*.jar

      - name: Upload Cucumber Report JSON
        uses: actions/upload-artifact@v4
        with:
          name: cucumber-report
          path: Faculdade/src/test/resources/target/cucumber-report.json

  docker-build-push:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target/
          
      - name: List downloaded artifact
        run: ls -lh target/

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASS }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin

      - name: Build and Push Docker image
        run: |
          # Extract the JAR filename.  Crucial for robustness.
          JAR_FILE=$(find target/ -name "*.jar" -printf "%f\n")
          TAG=$(echo $GITHUB_SHA | cut -c1-7)
          docker build -t $REGISTRY/$IMAGE_NAME:$TAG -f Dockerfile . # Corrected Dockerfile path
          docker push $REGISTRY/$IMAGE_NAME:$TAG
          docker tag $REGISTRY/$IMAGE_NAME:$TAG $REGISTRY/$IMAGE_NAME:latest
          docker push $REGISTRY/$IMAGE_NAME:latest

  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build-push
    steps:
      - name: Deploy to Azure Web App (Staging)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME_STAGING }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}
          images: "${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"

  deploy-production:
    runs-on: ubuntu-latest
    needs: docker-build-push
    steps:
      - name: Deploy to Azure Web App (Production)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME_PRODUCTION }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_PRODUCTION }}
          images: "${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
